<?php
// $Id: admin_language.module,v 1.1.2.2 2009/08/07 14:43:58 wulff Exp $

/**
 * @file
 * Makes sure all admin pages are displayed in the preferred language of the
 * administrator.
 *
 * Copyright 2009 Morten Wulff <wulff@ratatosk.net>
 */

/* --- HOOKS ---------------------------------------------------------------- */

function admin_language_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/language':
      return '<p>'. t('Use the %admin column to select the default language for all administration pages. The language you select must be enabled.', array('%admin' => 'admin')) .'</p>';
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function admin_language_perm() {
  return array('display admin pages in another language');
}

/**
 * Implementation of hook_menu().
 */
function admin_language_menu() {
  $items = array();

  $items['admin/settings/admin_language'] = array(
    'title'            => 'Administration language',
    'description'      => 'Select which parts of the site should use the selected administration language.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('admin_language_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function admin_language_init() {
  $access = user_access('display admin pages in another language');
  $count  = variable_get('language_count', 1);

  $switch_language = _admin_language_switch_language();

  if ($access && $count > 1 && $switch_language) {
    $languages = language_list('enabled');
    $languages = $languages[1];

    global $language;
    $admin_language = variable_get('admin_language_default', 'en');
    $language = $languages[$admin_language];
  }
}

/**
 * Implementation of hook_form_alter().
 */
function admin_language_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'locale_languages_overview_form') {
    // use the same options as the default language selector...
    $options = $form['enabled']['#options'];

    // ...but use a different default value for the admin language
    $form['admin_language'] = array(
      '#type'          => 'radios',
      '#options'       => $options,
      '#default_value' => variable_get('admin_language_default', 'en'),
    );

    // override the default theme function to render the extra field
    $form['#theme'] = 'admin_language_languages_overview_form';

    // add validate and submit handlers to handle the new field
    $form['#validate'][] = 'admin_language_languages_overview_form_validate';
    $form['#submit'][]   = 'admin_language_languages_overview_form_submit';
  }
}

/**
 * Implementation of hook_theme().
 */
function admin_language_theme() {
  return array(
    'admin_language_languages_overview_form' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/* --- FORMS ---------------------------------------------------------------- */

/**
 * Settings form.
 */
function admin_language_settings() {
  $form = array();

  $options = array(
    'admin' => t('Administration pages (admin)'),
    'node'  => t('Node add/edit pages (node/add & node/N/edit)'),
    'user'  => t('User pages (user/N/edit)'),
  );

  $form['admin_language_sections'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Sections'),
    '#description'   => t('Select the sections you want the administration language to affect.'),
    '#options'       => $options,
    '#default_value' => variable_get('admin_language_sections', array('admin' => 'admin')),
  );

  return system_settings_form($form);
}

/**
 * Validation handler for the augmented language overview form.
 */
function admin_language_languages_overview_form_validate($form, &$form_state) {
  $admin_language = $form_state['values']['admin_language'];
  $enabled = $form_state['values']['enabled'][$admin_language];
  $default = language_default();
  if (($admin_language != $default->language) && !$enabled) {
    form_set_error('', t('Only enabled languages can be chosen as the admin language.'));
  }
}

/**
 * Submit handler for the augmented language overview form.
 */
function admin_language_languages_overview_form_submit($form, &$form_state) {
  $admin_language = $form_state['values']['admin_language'];
  variable_set('admin_language_default', $admin_language);
}

/* --- THEME ---------------------------------------------------------------- */

/**
 * Theme the language overview form.
 *
 * This is just theme_locale_languages_overview_form() with support for the
 * admin language radio buttons.
 */
function theme_admin_language_languages_overview_form($form) {
  $default = language_default();
  foreach ($form['name'] as $key => $element) {
    if (is_array($element) && element_child($key)) {
      if ($key == $default->language) {
        $form['enabled'][$key]['#attributes']['disabled'] = 'disabled';
      }
      $rows[] = array(
        array('data' => drupal_render($form['enabled'][$key]), 'align' => 'center'),
        check_plain($key),
        '<strong>'. drupal_render($form['name'][$key]) .'</strong>',
        drupal_render($form['native'][$key]),
        drupal_render($form['direction'][$key]),
        drupal_render($form['site_default'][$key]),
        drupal_render($form['admin_language'][$key]),
        drupal_render($form['weight'][$key]),
        l(t('edit'), 'admin/settings/language/edit/'. $key) . (($key != 'en' && $key != $default->language) ? ' '. l(t('delete'), 'admin/settings/language/delete/'. $key) : '')
      );
    }
  }
  $header = array(array('data' => t('Enabled')), array('data' => t('Code')), array('data' => t('English name')), array('data' => t('Native name')), array('data' => t('Direction')), array('data' => t('Default')), array('data' => t('Admin')), array('data' => t('Weight')), array('data' => t('Operations')));
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

/* --- UTILITY -------------------------------------------------------------- */

/**
 * Determine whether the language needs to be switched on the current path.
 *
 * @return boolean
 *   TRUE to switch to the selected administration language or FALSE to use the
 *   default language.
 */
function _admin_language_switch_language() {
  $switch = FALSE;
  $sections = variable_get('admin_language_sections', array('admin' => 'admin'));

  foreach ($sections as $section) {
    if (!$section) {
      continue;
    }
    switch ($section) {
      case 'admin':
        if (arg(0) == 'admin') {
          $switch = TRUE;
        }
        break;
      case 'node':
        if ((arg(0) == 'node' && arg(1) == 'add') || (arg(0) == 'node' && arg(2) == 'edit')) {
          $switch = TRUE;
        }
        break;
      case 'user':
        if (arg(0) == 'user' && arg(2) == 'edit') {
          $switch = TRUE;
        }
        break;
    }
  }

  return $switch;
}
